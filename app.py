import streamlit as st
import joblib
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from sklearn.preprocessing import StandardScaler
from PIL import Image
from scipy import stats
import os
# Configuration de la page
st.set_page_config(
    page_title="Pr√©diction de risque cardiaque - Multi-Mod√®les",
    layout="wide",
    initial_sidebar_state="expanded"
)

def local_css(file_name):
    with open(file_name) as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

local_css('./css/pre.css')

# ---- 1. Chargement des mod√®les (version robuste) ----
@st.cache_resource
def load_models():
    """Charge tous les mod√®les avec v√©rifications"""
    try:
        # V√©rification des fichiers avant chargement
        required_files = [
            './models/heart_model_pipeline_decision_tree.joblib',
            './models/heart_ann_model.h5',
            './models/ann_scaler.joblib',
            './models/feature_names_decision_tree.joblib'
        ]
        
        for file in required_files:
            try:
                with open(file, 'rb'):
                    pass
            except FileNotFoundError:
                st.error(f"Fichier manquant : {file}")
                return None

        # Chargement effectif
        dt_model = joblib.load(required_files[0])
        ann_model = tf.keras.models.load_model(required_files[1])
        scaler = joblib.load(required_files[2])
        feature_names = joblib.load(required_files[3])

        # Validation des dimensions
        if len(feature_names) != len(scaler.mean_):
            st.error("Incompatibilit√© : Nombre de features diff√©rent entre le scaler et les noms de colonnes")
            return None

        return {
            'dt': dt_model,
            'ann': ann_model,
            'scaler': scaler,
            'feature_names': feature_names
        }

    except Exception as e:
        st.error(f"ERREUR de chargement : {str(e)}")
        return None

# ---- 2. Interface Utilisateur am√©lior√©e ----
def show_input_form(feature_names):
    """Formulaire avec gestion correcte des onglets"""
    tab1, tab2, tab3 = st.tabs(["üìã Pr√©diction", "üìä Analyse", "‚ÑπÔ∏è Aide"])
    input_df = None  # Initialisation

    # Tab1 - Formulaire de pr√©diction
    with tab1:
        with st.form("cardiac_risk_form", clear_on_submit=False):
            cols = st.columns(2)
            
            with cols[0]:
                st.subheader("Informations d√©mographiques")
                age = st.slider("√Çge", 1, 120, 50, help="√Çge en ann√©es")
                sex = st.radio("Sexe", ["Femme", "Homme"], index=1)
                
                st.subheader("Param√®tres cliniques")
                trestbps = st.slider("Pression art√©rielle (mm Hg)", 90, 200, 120)
                chol = st.slider("Cholest√©rol (mg/dl)", 100, 600, 200)
                thalach = st.slider("Fr√©quence cardiaque maximale", 60, 220, 150, 
                                   help="Fr√©quence cardiaque maximale atteinte (bpm)")

            with cols[1]:
                st.subheader("Sympt√¥mes et tests")
                cp_options = {
                    0: "Typique angine",
                    1: "Douleur atypique", 
                    2: "Douleur non-angineuse",
                    3: "Asymptomatique"
                }
                cp = st.selectbox("Type de douleur thoracique", 
                                 options=list(cp_options.keys()), 
                                 format_func=lambda x: cp_options[x])
                
                fbs = st.checkbox("Glyc√©mie √† jeun > 120 mg/dl")
                exang = st.checkbox("Angine induite par l'effort")
                oldpeak = st.slider("D√©pression ST (mm)", 0.0, 10.0, 1.0, 0.1)

            # Deuxi√®me ligne de param√®tres
            cols2 = st.columns(2)
            with cols2[0]:
                st.subheader("R√©sultats ECG")
                restecg_options = {
                    0: "Normal", 
                    1: "Anomalie onde ST-T",
                    2: "Hypertrophie ventriculaire"
                }
                restecg = st.selectbox("ECG au repos", 
                                      options=list(restecg_options.keys()),
                                      format_func=lambda x: restecg_options[x])

            with cols2[1]:
                st.subheader("Param√®tres avanc√©s")
                slope_options = {
                    0: "Descendante",
                    1: "Plate",
                    2: "Ascendante"
                }
                slope = st.selectbox("Pente du segment ST", 
                                   options=list(slope_options.keys()),
                                   format_func=lambda x: slope_options[x])

            submitted = st.form_submit_button("ü§ñ Analyser le risque")

            if submitted:
                # Validation des entr√©es
                if chol < 100 or chol > 600:
                    st.error("Valeur de cholest√©rol invalide (doit √™tre entre 100 et 600)")
                else:        
                    # Construction du DataFrame avec ordre garanti
                    input_data = {
                        'age': age,
                        'sex': 1 if sex == "Homme" else 0,
                        'chest pain type': cp,
                        'resting bp s': trestbps,
                        'cholesterol': chol,
                        'max heart rate': thalach,
                        'fasting blood sugar': 1 if fbs else 0,
                        'resting ecg': restecg,
                        'exercise angina': 1 if exang else 0,
                        'oldpeak': oldpeak,
                        'ST slope': slope
                    }
                    input_df = pd.DataFrame([input_data], columns=feature_names)
                    st.session_state.input_data = input_df  # Sauvegarde pour debug

    # Tab2 - Analyse (toujours visible)
    with tab2:
        st.subheader("Analyse exploratoire des donn√©es")
        try:
            data = pd.read_csv("./data/clean_data.csv")
            
            with st.expander("Statistiques descriptives"):
                st.dataframe(data.describe())

            # Visualisations
            col1, col2 = st.columns(2)
            with col1:
                fig = plt.figure(figsize=(8, 4))
                sns.histplot(data['age'], bins=20, kde=True)
                plt.title('Distribution des √¢ges')
                st.pyplot(fig)
                
            with col2:
                fig = plt.figure(figsize=(8, 4))
                sns.countplot(x='sex', data=data)
                plt.title('R√©partition par sexe (0=Femme, 1=Homme)')
                st.pyplot(fig)
            
            # Corr√©lations
            st.markdown("### üîó Matrice de corr√©lation")
            fig = plt.figure(figsize=(10, 8))
            sns.heatmap(data.corr(), annot=True, fmt=".1f", cmap="coolwarm")
            plt.title('Corr√©lation entre les variables')
            st.pyplot(fig)

        except Exception as e:
            st.warning(f"Impossible de charger les donn√©es d'analyse : {e}")

    # Tab3 - Aide (toujours visible)
    with tab3:
        st.subheader("Guide d'utilisation")
        st.markdown("""
        **Comment utiliser l'application ?**
        1. Remplissez tous les champs du formulaire de pr√©diction
        2. Cliquez sur le bouton "Analyser le risque cardiaque"
        3. Consultez les r√©sultats et recommandations
        """)
        
        st.markdown("---")
        st.subheader("Explications des param√®tres")
        with st.expander("D√©tails des variables m√©dicales"):
            st.markdown("""
            - **√Çge**: √Çge du patient en ann√©es
            - **Sexe**: 0 = Femme, 1 = Homme
            - **Type de douleur thoracique**: 
              - 0: Angine typique
              - 1: Douleur atypique
              - 2: Douleur non-angineuse
              - 3: Asymptomatique
            - **Pression art√©rielle**: Pression au repos en mm Hg
            - **Cholest√©rol**: Niveau en mg/dl
            - **Fr√©quence cardiaque max**: Fr√©quence cardiaque maximale atteinte (bpm)
            """)

    return input_df  # Retourne None si non soumis, sinon le DataFrame

# ---- 3. Affichage des r√©sultats (version robuste) ----
def display_results(prediction, proba, model_type):
    """Affiche les r√©sultats avec gestion des erreurs"""
    try:
        # Validation des probabilit√©s
        if not isinstance(proba, (list, np.ndarray)) or len(proba) != 2:
            raise ValueError("Format de probabilit√© invalide")
        
        risk_percent = proba[1] * 100
        if np.isnan(risk_percent):
            raise ValueError("Calcul de risque invalide (NaN)")

        # D√©finition du niveau de risque
        if risk_percent < 30:
            risk_class = "low"
            risk_label = "Faible"
            risk_color = "#28a745"
        elif risk_percent < 70:
            risk_class = "medium"
            risk_label = "Mod√©r√©"
            risk_color = "#ffc107"
        else:
            risk_class = "high"
            risk_label = "√âlev√©"
            risk_color = "#dc3545"

        # Affichage principal
        st.markdown("---")
        st.subheader(f"üìä R√©sultats ({model_type})")
        
        cols = st.columns([1, 2])
        with cols[0]:
            # Jauge visuelle
            st.markdown(f"""
            <div style="text-align: center; border: 2px solid {risk_color}; 
                        padding: 20px; border-radius: 10px; margin-bottom: 20px;">
                <h2 class="risk-{risk_class}" style="margin: 0;">{risk_label}</h2>
                <h1 style="color: {risk_color}; margin: 5px 0;">{risk_percent:.1f}%</h1>
                <p>de risque cardiaque</p>
            </div>
            """, unsafe_allow_html=True)

        with cols[1]:
            # Graphique d√©taill√©
            fig, ax = plt.subplots(figsize=(10, 4))
            sns.barplot(x=['Sain', '√Ä risque'], y=proba, 
                        palette=['#28a745', '#dc3545'], ax=ax)
            ax.set_ylim(0, 1)
            ax.set_title('Probabilit√©s de pr√©diction')
            for p in ax.patches:
                ax.annotate(f"{p.get_height():.1%}", 
                           (p.get_x() + p.get_width()/2, p.get_height()),
                           ha='center', va='center', xytext=(0, 10), 
                           textcoords='offset points')
            st.pyplot(fig)

        # Conclusion et recommandations
        if prediction[0] == 1:
            st.error("""
            **‚ö†Ô∏è Conclusion:** Risque √©lev√© de maladie cardiaque d√©tect√©
            """)
        else:
            st.success("""
            **‚úÖ Conclusion:** Risque faible de maladie cardiaque d√©tect√©
            """)
            
        show_recommendations(prediction)

    except Exception as e:
        st.error(f"Erreur d'affichage des r√©sultats : {str(e)}")

# ---- 4. Fonctions auxiliaires ----
def show_recommendations(prediction):
    """Affiche les recommandations personnalis√©es"""
    st.markdown("---")
    st.subheader("üìå Recommandations personnalis√©es")
    
    if prediction[0] == 1:
        cols = st.columns(2)
        with cols[0]:
            st.markdown("""
            **üè• Consultation urgente**
            - Rendez-vous cardiologue sous 7 jours
            - Bilan complet: ECG + √©chocardiogramme
            - Surveillance tensionnelle quotidienne
            """)
        with cols[1]:
            st.markdown("""
            **üíä Traitement**
            - √âvaluation m√©dicamenteuse
            - Bilan lipidique approfondi
            - Test d'effort supervis√©
            """)
    else:
        st.markdown("""
        **ü©∫ Pr√©vention active**
        - Contr√¥les annuels apr√®s 40 ans
        - Activit√© physique 150 min/semaine
        - R√©gime m√©diterran√©en recommand√©
        """)

def compare_models(models, input_df):
    """Affiche une comparaison des deux mod√®les"""
    st.markdown("---")
    st.subheader("üÜö Comparaison des mod√®les")
    
    try:
        # Pr√©dictions DT
        dt_pred = models['dt'].predict(input_df)[0]
        dt_proba = models['dt'].predict_proba(input_df)[0][1]
        
        # Pr√©dictions ANN
        scaled_input = models['scaler'].transform(input_df)
        ann_proba = models['ann'].predict(scaled_input)[0][0]
        ann_pred = 1 if ann_proba >= 0.5 else 0
        
        # M√©triques
        col1, col2 = st.columns(2)
        with col1:
            st.metric(
                "Decision Tree", 
                "√Ä risque" if dt_pred == 1 else "Sain",
                f"{dt_proba*100:.1f}% de confiance"
            )
        
        with col2:
            st.metric(
                "R√©seau de Neurones", 
                "√Ä risque" if ann_pred == 1 else "Sain",
                f"{ann_proba*100:.1f}% de confiance"
            )

        # Graphique comparatif
        fig, ax = plt.subplots(figsize=(10, 4))
        models_data = {
            'Decision Tree': dt_proba,
            'R√©seau Neuronal': ann_proba
        }
        sns.barplot(x=list(models_data.keys()), y=list(models_data.values()),
                    palette="viridis", ax=ax)
        ax.set_ylim(0, 1)
        ax.set_ylabel('Probabilit√© de risque')
        ax.set_title('Comparaison des pr√©dictions')
        for p in ax.patches:
            ax.annotate(f'{p.get_height():.2f}', 
                       (p.get_x() + p.get_width() / 2., p.get_height()),
                       ha='center', va='center', xytext=(0, 10), 
                       textcoords='offset points')
        st.pyplot(fig)

    except Exception as e:
        st.error(f"Erreur de comparaison : {str(e)}")

# ---- 5. Fonction principale ----
def main():
    """Point d'entr√©e de l'application"""
    st.title("ü´Ä **Analyse de Risque Cardiaque**")

    # Chargement des mod√®les
    with st.spinner("Chargement des mod√®les..."):
        models = load_models()
    
    if not models:
        st.stop()  # Arr√™t si √©chec de chargement

    # S√©lecteur de mod√®le
    model_type = st.radio(
        "S√©lectionnez le mod√®le:",
        ("Decision Tree", "R√©seau de Neurones (ANN)"),
        horizontal=True,
        index=0
    )

    # Formulaire et onglets
    input_df = show_input_form(models['feature_names'])

    # Pr√©diction si donn√©es soumises
    if input_df is not None:
        try:
            # Debug: Afficher les donn√©es d'entr√©e
            st.write("## Donn√©es analys√©es")
            st.dataframe(input_df.style.highlight_max(axis=0))

            # Pr√©diction
            with st.spinner("Analyse en cours..."):
                if model_type == "Decision Tree":
                    prediction = models['dt'].predict(input_df)
                    proba = models['dt'].predict_proba(input_df)[0]
                else:
                    scaled_input = models['scaler'].transform(input_df)
                    proba_ann = float(models['ann'].predict(scaled_input)[0][0])
                    proba = [1 - proba_ann, proba_ann]
                    prediction = [1] if proba_ann >= 0.5 else [0]

                # Affichage des r√©sultats
                display_results(prediction, proba, model_type)
                
                # Option de comparaison
                if st.checkbox("Afficher la comparaison des mod√®les"):
                    compare_models(models, input_df)

        except Exception as e:
            st.error(f"Erreur lors de la pr√©diction: {str(e)}")
            st.error("Veuillez v√©rifier vos donn√©es et r√©essayer.")
os.system("sudo apt-get install libportaudio2") 
os.system("sudo apt-get update")
if __name__ == "__main__":
    main()
